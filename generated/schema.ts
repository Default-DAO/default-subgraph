// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class DefaultOSFactory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save DefaultOSFactory entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save DefaultOSFactory entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("DefaultOSFactory", id.toString(), this);
  }

  static load(id: string): DefaultOSFactory | null {
    return store.get("DefaultOSFactory", id) as DefaultOSFactory | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get osCount(): i32 {
    let value = this.get("osCount");
    return value.toI32();
  }

  set osCount(value: i32) {
    this.set("osCount", Value.fromI32(value));
  }
}

export class DefaultOS extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save DefaultOS entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save DefaultOS entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("DefaultOS", id.toString(), this);
  }

  static load(id: string): DefaultOS | null {
    return store.get("DefaultOS", id) as DefaultOS | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get address(): string {
    let value = this.get("address");
    return value.toString();
  }

  set address(value: string) {
    this.set("address", Value.fromString(value));
  }
}

export class Member extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Member entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Member entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Member", id.toString(), this);
  }

  static load(id: string): Member | null {
    return store.get("Member", id) as Member | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get alias(): string {
    let value = this.get("alias");
    return value.toString();
  }

  set alias(value: string) {
    this.set("alias", Value.fromString(value));
  }

  get epoch(): i32 {
    let value = this.get("epoch");
    return value.toI32();
  }

  set epoch(value: i32) {
    this.set("epoch", Value.fromI32(value));
  }

  get stakedAmt(): BigDecimal {
    let value = this.get("stakedAmt");
    return value.toBigDecimal();
  }

  set stakedAmt(value: BigDecimal) {
    this.set("stakedAmt", Value.fromBigDecimal(value));
  }
}

export class Stake extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Stake entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Stake entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Stake", id.toString(), this);
  }

  static load(id: string): Stake | null {
    return store.get("Stake", id) as Stake | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get type(): string {
    let value = this.get("type");
    return value.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get epoch(): i32 {
    let value = this.get("epoch");
    return value.toI32();
  }

  set epoch(value: i32) {
    this.set("epoch", Value.fromI32(value));
  }

  get amount(): BigDecimal {
    let value = this.get("amount");
    return value.toBigDecimal();
  }

  set amount(value: BigDecimal) {
    this.set("amount", Value.fromBigDecimal(value));
  }

  get lockDuration(): i32 {
    let value = this.get("lockDuration");
    return value.toI32();
  }

  set lockDuration(value: i32) {
    this.set("lockDuration", Value.fromI32(value));
  }

  get member(): string {
    let value = this.get("member");
    return value.toString();
  }

  set member(value: string) {
    this.set("member", Value.fromString(value));
  }
}

export class Endorsement extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Endorsement entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Endorsement entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Endorsement", id.toString(), this);
  }

  static load(id: string): Endorsement | null {
    return store.get("Endorsement", id) as Endorsement | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get epoch(): i32 {
    let value = this.get("epoch");
    return value.toI32();
  }

  set epoch(value: i32) {
    this.set("epoch", Value.fromI32(value));
  }

  get amount(): BigDecimal {
    let value = this.get("amount");
    return value.toBigDecimal();
  }

  set amount(value: BigDecimal) {
    this.set("amount", Value.fromBigDecimal(value));
  }

  get fromMember(): string {
    let value = this.get("fromMember");
    return value.toString();
  }

  set fromMember(value: string) {
    this.set("fromMember", Value.fromString(value));
  }

  get toMember(): string {
    let value = this.get("toMember");
    return value.toString();
  }

  set toMember(value: string) {
    this.set("toMember", Value.fromString(value));
  }
}

export class MemberEndorsementInfo extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save MemberEndorsementInfo entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save MemberEndorsementInfo entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("MemberEndorsementInfo", id.toString(), this);
  }

  static load(id: string): MemberEndorsementInfo | null {
    return store.get(
      "MemberEndorsementInfo",
      id
    ) as MemberEndorsementInfo | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get epoch(): i32 {
    let value = this.get("epoch");
    return value.toI32();
  }

  set epoch(value: i32) {
    this.set("epoch", Value.fromI32(value));
  }

  get member(): string {
    let value = this.get("member");
    return value.toString();
  }

  set member(value: string) {
    this.set("member", Value.fromString(value));
  }

  get endorsementGivenAmt(): BigDecimal {
    let value = this.get("endorsementGivenAmt");
    return value.toBigDecimal();
  }

  set endorsementGivenAmt(value: BigDecimal) {
    this.set("endorsementGivenAmt", Value.fromBigDecimal(value));
  }

  get endorsementReceivedAmt(): BigDecimal {
    let value = this.get("endorsementReceivedAmt");
    return value.toBigDecimal();
  }

  set endorsementReceivedAmt(value: BigDecimal) {
    this.set("endorsementReceivedAmt", Value.fromBigDecimal(value));
  }

  get endorsementsGiven(): Array<string> {
    let value = this.get("endorsementsGiven");
    return value.toStringArray();
  }

  set endorsementsGiven(value: Array<string>) {
    this.set("endorsementsGiven", Value.fromStringArray(value));
  }

  get endorsementsReceived(): Array<string> {
    let value = this.get("endorsementsReceived");
    return value.toStringArray();
  }

  set endorsementsReceived(value: Array<string>) {
    this.set("endorsementsReceived", Value.fromStringArray(value));
  }
}
