// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class EpochIncremented extends ethereum.Event {
  get params(): EpochIncremented__Params {
    return new EpochIncremented__Params(this);
  }
}

export class EpochIncremented__Params {
  _event: EpochIncremented;

  constructor(event: EpochIncremented) {
    this._event = event;
  }

  get epoch(): i32 {
    return this._event.parameters[0].value.toI32();
  }

  get epochTime(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Epoch extends ethereum.SmartContract {
  static bind(address: Address): Epoch {
    return new Epoch("Epoch", address);
  }

  TOKEN_BONUS(): BigInt {
    let result = super.call("TOKEN_BONUS", "TOKEN_BONUS():(uint256)", []);

    return result[0].toBigInt();
  }

  try_TOKEN_BONUS(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("TOKEN_BONUS", "TOKEN_BONUS():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _OS(): Address {
    let result = super.call("_OS", "_OS():(address)", []);

    return result[0].toAddress();
  }

  try__OS(): ethereum.CallResult<Address> {
    let result = super.tryCall("_OS", "_OS():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  current(): i32 {
    let result = super.call("current", "current():(uint16)", []);

    return result[0].toI32();
  }

  try_current(): ethereum.CallResult<i32> {
    let result = super.tryCall("current", "current():(uint16)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  epochTime(): BigInt {
    let result = super.call("epochTime", "epochTime():(uint256)", []);

    return result[0].toBigInt();
  }

  try_epochTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("epochTime", "epochTime():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get os_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class IncrementEpochCall extends ethereum.Call {
  get inputs(): IncrementEpochCall__Inputs {
    return new IncrementEpochCall__Inputs(this);
  }

  get outputs(): IncrementEpochCall__Outputs {
    return new IncrementEpochCall__Outputs(this);
  }
}

export class IncrementEpochCall__Inputs {
  _call: IncrementEpochCall;

  constructor(call: IncrementEpochCall) {
    this._call = call;
  }
}

export class IncrementEpochCall__Outputs {
  _call: IncrementEpochCall;

  constructor(call: IncrementEpochCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetTokenBonusCall extends ethereum.Call {
  get inputs(): SetTokenBonusCall__Inputs {
    return new SetTokenBonusCall__Inputs(this);
  }

  get outputs(): SetTokenBonusCall__Outputs {
    return new SetTokenBonusCall__Outputs(this);
  }
}

export class SetTokenBonusCall__Inputs {
  _call: SetTokenBonusCall;

  constructor(call: SetTokenBonusCall) {
    this._call = call;
  }

  get newTokenBonus_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetTokenBonusCall__Outputs {
  _call: SetTokenBonusCall;

  constructor(call: SetTokenBonusCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
