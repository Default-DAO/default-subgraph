// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ModuleInstalled extends ethereum.Event {
  get params(): ModuleInstalled__Params {
    return new ModuleInstalled__Params(this);
  }
}

export class ModuleInstalled__Params {
  _event: ModuleInstalled;

  constructor(event: ModuleInstalled) {
    this._event = event;
  }

  get moduleKeycode(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get OSAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get moduleAddress(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class DefaultOS extends ethereum.SmartContract {
  static bind(address: Address): DefaultOS {
    return new DefaultOS("DefaultOS", address);
  }

  MODULES(param0: Bytes): Address {
    let result = super.call("MODULES", "MODULES(bytes3):(address)", [
      ethereum.Value.fromFixedBytes(param0)
    ]);

    return result[0].toAddress();
  }

  try_MODULES(param0: Bytes): ethereum.CallResult<Address> {
    let result = super.tryCall("MODULES", "MODULES(bytes3):(address)", [
      ethereum.Value.fromFixedBytes(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getModule(moduleKeycode_: Bytes): Address {
    let result = super.call("getModule", "getModule(bytes3):(address)", [
      ethereum.Value.fromFixedBytes(moduleKeycode_)
    ]);

    return result[0].toAddress();
  }

  try_getModule(moduleKeycode_: Bytes): ethereum.CallResult<Address> {
    let result = super.tryCall("getModule", "getModule(bytes3):(address)", [
      ethereum.Value.fromFixedBytes(moduleKeycode_)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  organizationName(): string {
    let result = super.call(
      "organizationName",
      "organizationName():(string)",
      []
    );

    return result[0].toString();
  }

  try_organizationName(): ethereum.CallResult<string> {
    let result = super.tryCall(
      "organizationName",
      "organizationName():(string)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get organizationName_(): string {
    return this._call.inputValues[0].value.toString();
  }

  get organizationId_(): string {
    return this._call.inputValues[1].value.toString();
  }

  get factory_(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class InstallModuleCall extends ethereum.Call {
  get inputs(): InstallModuleCall__Inputs {
    return new InstallModuleCall__Inputs(this);
  }

  get outputs(): InstallModuleCall__Outputs {
    return new InstallModuleCall__Outputs(this);
  }
}

export class InstallModuleCall__Inputs {
  _call: InstallModuleCall;

  constructor(call: InstallModuleCall) {
    this._call = call;
  }

  get installer_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class InstallModuleCall__Outputs {
  _call: InstallModuleCall;

  constructor(call: InstallModuleCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get token_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get recipient_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount_(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
