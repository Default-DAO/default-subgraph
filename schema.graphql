# Not able to deploy with fulltext search defined. Please debug and add back
# if this feature is important.
# Error: subgraph deployment error: Fulltext search not yet deterministic
# type _Schema_
#   @fulltext(
#     name: "search"
#     language: en
#     algorithm: rank
#     include: [
#       { entity: "DefaultOS", fields: [{ name: "name" }] },
#       { entity: "Member", fields: [{ name: "alias" }] }
#     ]
#   )

##################################
######## DefaultOSFactory ########
##################################

type DefaultOSFactory @entity {
  id: ID! # factory-address
  osCount: Int!
}

##################################
############### OS ###############
##################################

type DefaultOS @entity {
  id: ID! # address
  name: String!
}

type Module @entity {
  id: ID! # os-keycode
  os: DefaultOS!
  address: String!
  keycode: String!
}

##################################
############# MEMBER #############
##################################

type Member @entity {
  id: ID!  # os-address
  address: String!
  os: DefaultOS!
  epoch: Epoch!
  alias: String!
  stakedAmt: BigDecimal!
  miningRewards: BigDecimal!
  bonus: BigDecimal!
  peerRewards: BigDecimal!
  endorsementsReceived: BigDecimal!
}

enum StakeType {
  STAKE
  UNSTAKE
}

type Stake @entity {
  id: ID!  # uniqueEventId
  os: DefaultOS!
  epochNumber: Int!
  type: StakeType!
  amount: BigDecimal!
  lockDuration: Int!
  member: Member!
}

##################################
############# EPOCH ##############
##################################

type Epoch @entity {
  id: ID!  # os-number
  os: DefaultOS!
  number: Int!  

  staked: BigDecimal!      
}

##################################
############# TOKEN ##############
##################################

type Token @entity {
  id: ID! # os-address
  os: DefaultOS!  
}

##################################
########### TREASURY #############
##################################

type Vault @entity {
  id: ID! # os-address
  os: DefaultOS!
  name: String!
  symbol: String!  
  decimals: Int!
  fee: Int!
  amount: BigDecimal!
}

##################################
########## TRANSACTIONS ##########
##################################

# Ignore Transfer event when sender address is 0 address (mint)
# Listen to RewardsClaimed, RewardsIssued, EpochIncremented events for some types instead
enum TokenTransactionType {
  PEER_REWARD
  MINING_REWARD
  BONUS
  TRANSFER
  BURN
}

# What happens when def token sent to a non-member? 
# Putting address for to/from instead of member for this reason
type TokenTransaction @entity {
  id: ID! # os-uniqueEventId
  os: DefaultOS!
  epochNumber: Int
  from: String!
  to: String!
  amount: BigDecimal!
  type: TokenTransactionType!
}

enum VaultTransactionType {
  DEPOSIT
  WITHDRAW
}

type VaultTransaction @entity {
  id: ID!  # os-vault-uniqueEventId
  os: DefaultOS!
  epochNumber: Int!
  vault: Vault!
  member: String!
  amount: BigDecimal!
  type: VaultTransactionType!
}

##################################
############ MINING ##############
##################################

type MiningRegistration @entity {
  id: ID!  # os-epoch-member
  epochNumber: Int!
  member: Member!
  os: DefaultOS!
}

##################################
############ REWARDS #############
##################################

type RewardsRegistration @entity {
  id: ID!  # os-epoch-member
  os: DefaultOS!
  epochNumber: Int!
  member: Member!
}

type Allocation @entity {
  id: ID!  # os-epoch-from-to
  os: DefaultOS!
  points: BigDecimal!
  from: Member!
  to: Member!
}

type CommittedAllocation @entity {
  id: ID!  # os-epoch-from-to
  os: DefaultOS!
  epochNumber: Int!
  points: BigDecimal!
  rewards: BigDecimal!
  from: Member!
  to: Member!
}


##################################
########### ENDORSEMENT ##########
##################################

type Endorsement @entity {
  id: ID!  # os-epoch-from-to
  os: DefaultOS!
  epochNumber: Int!
  amount: BigDecimal!  
  from: Member!
  to: Member!
}