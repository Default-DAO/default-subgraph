type _Schema_
  @fulltext(
    name: "search"
    language: en
    algorithm: rank
    include: [
      { entity: "DefaultOS", fields: [{ name: "name" }, { name: "alias" }] },
      { entity: "Member", fields: [{ name: "alias" }] }
    ]
  )

##################################
######## DefaultOSFactory ########
##################################

type DefaultOSFactory @entity {
  id: ID! #address
  count: Int!
}

##################################
############### OS ###############
##################################

type DefaultOS @entity {
  id: ID! #address
  name: String!
  alias: String!
}

type Module @entity {
  id: ID! #address
  os: DefaultOS!
  keycode: String!
  createdAt: Epoch!
}

##################################
############# MEMBER #############
##################################

type Member @entity {
  id: ID!  # member-os
  os: DefaultOS!
  epoch: Epoch!
  alias: String!
  createdAt: Epoch!
  stakedAmt: BigDecimal!

  vault: [VaultMemberInfo!]! @derivedFrom(field: "member")
  stake: BigDecimal!
  miningReward: BigDecimal!
  bonus: BigDecimal!
  peerReward: BigDecimal!
}

enum StakeType {
  STAKE
  UNSTAKE
}

type Stake @entity {
  id: ID!  #unique event id
  os: DefaultOS!
  epoch: Epoch!
  type: StakeType!
  amount: BigDecimal!
  lockDuration: Int!
  member: Member!
}

##################################
############# EPOCH ##############
##################################

type Epoch @entity {
  id: ID! #epoch-os
  os: DefaultOS!
  epoch: Int!
}

type EpochMemberInfo @entity {
  id: ID! #epoch-os-member
  os: DefaultOS!
  member: Member!
  epoch: Int!

  # There can be many vaults
  vault: [VaultMemberEpochInfo!]! @derivedFrom(field: "member")
  stake: BigDecimal!
  miningReward: BigDecimal!
  bonus: BigDecimal!
  peerReward: BigDecimal!
}

##################################
############# TOKEN ##############
##################################

type Token @entity {
  id: ID! #address
  os: DefaultOS!  
}

##################################
########### TREASURY #############
##################################

type Vault @entity {
  id: ID! #address
  os: DefaultOS!
  name: String!
  symbol: String!
  token: Token!
  decimals: Int!
  fee: BigDecimal!
  amount: BigDecimal!
}

type VaultEpochInfo @entity {
  id: ID! #vault-epoch
  os: DefaultOS!
  vault: Vault!  
  rewardsPerShare: BigDecimal!
  amount: BigDecimal!
}

type VaultMemberInfo @entity {
  id: ID! #vault-member
  os: DefaultOS!
  epoch: Epoch!
  member: Member!
  vault: Vault!  
  amount: BigDecimal!  
}

type VaultMemberEpochInfo @entity {
  id: ID! #vault-member-epoch
  os: DefaultOS!
  epoch: Epoch!
  member: EpochMemberInfo!
  vault: Vault!  
  amount: BigDecimal!  
}

##################################
########## TRANSACTIONS ##########
##################################

# Ignore Transfer event when sender address is 0 address (mint)
# Listen to RewardsClaimed, RewardsIssued, EpochIncremented events for some types instead
enum TokenTransactionType {
  PEER_REWARD
  MINING_REWARD
  BONUS
  TRANSFER
  BURN
}

# What happens when def token sent to a non-member? 
# Putting address for to/from instead of member for this reason
type TokenTransaction @entity {
  id: ID! #uid
  os: DefaultOS!
  epoch: Epoch!
  token: Token!
  from: String!
  to: String!
  amount: BigDecimal!
  type: TokenTransactionType!
}

enum VaultTransactionType {
  DEPOSIT
  WITHDRAW
}

type VaultTransaction @entity {
  id: ID! #uid
  os: DefaultOS!
  epoch: Epoch!
  vault: Vault!
  member: Member!
  amount: BigDecimal!
  type: VaultTransactionType!
}

##################################
############ MINING ##############
##################################

type MiningRegistration @entity {
  id: ID! #member-os-epoch
  epoch: Epoch!
  member: Member!
  os: DefaultOS!
}

##################################
############ REWARDS #############
##################################

type RewardsRegistration @entity {
  id: ID! #member-os-epoch
  os: DefaultOS!
  epoch: Epoch!
  member: Member!
}

type Allocation @entity {
  id: ID! #from-to-os-epoch
  os: DefaultOS!
  epoch: Epoch!
  amount: Int!
  committed: Boolean!
  from: AllocationMemberInfo!
  to: AllocationMemberInfo!
}

type AllocationMemberInfo @entity {
  id: ID!  # member-os-epoch
  os: DefaultOS!
  epoch: Epoch!
  member: Member!
  allocationGivenAmt: BigDecimal!
  allocationReceivedAmt: BigDecimal!
  allocationsGiven: [Allocation!]! @derivedFrom(field: "from")
  allocationsReceived: [Allocation!]! @derivedFrom(field: "to")
}

##################################
########### ENDORSEMENT ##########
##################################

type Endorsement @entity {
  id: ID!  "toMember-fromMember-os-epoch"
  os: DefaultOS!
  epoch: Epoch!
  amount: BigDecimal!
  from: EndorsementMemberInfo!
  to: EndorsementMemberInfo!
}

type EndorsementMemberInfo @entity {
  id: ID!  # member-os-epoch
  os: DefaultOS!
  epoch: Epoch!
  member: Member!
  endorsementGivenAmt: BigDecimal!
  endorsementReceivedAmt: BigDecimal!
  endorsementsGiven: [Endorsement!]! @derivedFrom(field: "from")
  endorsementsReceived: [Endorsement!]! @derivedFrom(field: "to")
}